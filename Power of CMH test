#Power test of the CMH test:

#this assumes that we are attempting to detect the case where the allele frequency is 0.5, but we're doing a test of false-positive rate, so there is no actual allele frequency difference between the up and down pools.

#d demes
#dep = number of reads sampled per individual
#ind = number of individuals

run_cmh_false_pos <- function(d,dep,ind,num_reps){

pvals <- array (NA,c(num_reps,2))


for (bb in 1:num_reps){
  
	pops <- array (NA,c(2,2,d),dimnames = (list(pool = c("up","down"),allele = c ("ref","alt"),population = 1:d)))  #create an array to store the population
	pops_cor <- array (NA,c(2,2,d),dimnames = (list(pool = c("up","down"),allele = c ("ref","alt"),population = 1:d)))
	
	for (i in 1:d){
	
		#clunky way to simulate genotypes
		the_inds <- array (ceiling(runif((ind*2),min = 0, max = 4)),c(ind,2)) #get the number of alleles per individual in each of the up and down pools in this deme
	
		##convert their genotypes to hom, het, hom, as per HWE:
		the_inds[the_inds == 1] <- 0
		the_inds[the_inds > 1 & the_inds < 4] <- 1
		the_inds[the_inds == 4] <- 2
			
		the_inds <- the_inds / 2 #convert to a frequency

		the_reads1 <- rbinom(ind,dep,the_inds[,1]) #draw the number of alterante allele reads for each individual in the up pool
		the_reads2 <- rbinom(ind,dep,the_inds[,2]) #down pool


		pops[1,1,i] <- sum (the_reads1) #record
		pops[1,2,i] <- (dep * ind) - sum (the_reads1) 

		pops[2,1,i] <- sum (the_reads2)
		pops[2,2,i] <- (dep * ind) - sum (the_reads2)
		
		pops_cor[1,1,i] <- sum (the_reads1) * (ind * 2) / (dep *ind) #record
		pops_cor[1,2,i] <- ((dep * ind) - sum (the_reads1)) * (ind * 2) / (dep *ind)
		
		pops_cor[2,1,i] <- sum (the_reads2) * (ind * 2) / (dep *ind)
		pops_cor[2,2,i] <- ((dep * ind) - sum (the_reads2)) * (ind * 2) / (dep *ind)
		
		
	}

	the_test <- mantelhaen.test(pops)
	the_test_cor <- mantelhaen.test(pops_cor)
	pvals[bb,1] <- the_test$p.value
	pvals[bb,2] <- the_test_cor$p.value
	
}

  colSums (pvals < 0.05) / num_reps 
}



####
####
####
####
####
####


#run the CMH test with simulations across a range of number of demes, individuals, and depths:

the_d <- c(2,10,20,40)
the_ind <- c(5,10,15,20,25,30)
the_dep <- c(5,10,20,50,75,100)


the_res <- array (NA,c(length(the_d),length(the_ind),length(the_dep),2))


for (dd in 1:length (the_d)){
	
	this_d <- the_d[dd]

	for (ee in 1:length (the_ind)){
	
		this_ind <- the_ind[ee]

		for (ff in 1:length(the_dep)){
	
			this_dep <- the_dep[ff]

			the_res[dd,ee,ff,] <- run_cmh_false_pos (this_d,this_dep,this_ind,1000)
			
		}
	}
}


###PLOTTING:
###PLOTTING:
###PLOTTING:
###PLOTTING:



pdf("cmh_uncor_c1.2.pdf")
par (mfcol = c (2,2))

for (dd in 1:length(the_d)){
  plot (the_ind,the_res[dd,,1,1], type = "o",ylim = c (0,1), main = paste ("Number of demes = ",the_d[dd],sep = ""),cex.lab=1.2,cex.axis=1.1,xlab = "Number of individuals",ylab = "Proportion of false positives")

  for (ee in 2:length (the_dep)){
    points (the_ind,the_res[dd,,ee,1],type = "o", col = ee)	
  }
  arrows (-1000,0.05,1000,0.05,lwd = 3,lty = 2)
}

dev.off()



pdf("cmh_cor_c1.2.pdf")
par (mfcol = c (2,2))

for (dd in 1:length(the_d)){
  plot (the_ind,the_res[dd,,1,2], type = "o",ylim = c (0,1), main = paste ("Number of demes = ",the_d[dd],sep = ""),cex.lab=1.2,cex.axis=1.1,xlab = "Number of individuals",ylab = "Proportion of false positives")
  
  for (ee in 2:length (the_dep)){
    points (the_ind,the_res[dd,,ee,2],type = "o", col = ee)	
  }
  arrows (-1000,0.05,1000,0.05,lwd = 3,lty = 2)
}

dev.off()


pdf("cmh_legend_test.pdf")
  plot(1)
  legend ("left",c("dep = 5","dep = 10","dep = 20","dep = 50","dep = 75","dep = 100"),col = 1:6,lty = 1,cex=1.8, lwd=3.5)
dev.off()
